#!/usr/bin/env node

const fs = require('node:fs');
const process = require('node:process');

const stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;

function stringify(passedObj, options={}) {
    const indent = JSON.stringify([1], undefined, options.indent === undefined ? 4 : options.indent).slice(2, -3);
    const maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 100 : options.maxLength;
    let {replacer} = options;
    return (function _stringify(obj, currentIndent, reserved) {
        if (obj && typeof obj.toJSON === "function") {
            obj = obj.toJSON();
        }
        const string = JSON.stringify(obj, replacer);
        if (string === undefined) {
            return string;
        }
        const length = maxLength - currentIndent.length - reserved;
        if (string.length <= length) {
            const prettified = string.replace(stringOrChar, (match, stringLiteral) => stringLiteral || `${match} `);
            if (prettified.length <= length) {
                return prettified;
            }
        }
        if (replacer != null) {
            obj = JSON.parse(string);
            replacer = undefined;
        }
        if (typeof obj === "object" && obj !== null) {
            const nextIndent = currentIndent + indent;
            const items = [];
            let index = 0;
            let start;
            let end;
            if (Array.isArray(obj)) {
                start = "[";
                end = "]";
                const { length } = obj;
                for (; index < length; index++) {
                    items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || "null");
                }
            } else {
                start = "{";
                end = "}";
                const keys = Object.keys(obj);
                const { length } = keys;
                for (; index < length; index++) {
                    const key = keys[index];
                    const keyPart = `${JSON.stringify(key)}: `;
                    const value = _stringify(
                            obj[key],
                            nextIndent,
                            keyPart.length + (index === length - 1 ? 0 : 1)
                            );
                    if (value !== undefined) {
                        items.push(keyPart + value);
                    }
                }
            }
            if (items.length > 0) {
                return [start, indent + items.join(`,\n${nextIndent}`), end].join(`\n${currentIndent}`);
            }
        }
        return string;
    })(passedObj, "", 0);
}

if (process.argv.length > 3) {
    console.error(`Usage: ${process.argv[0]} [FILENAME]`);
    process.exit(1);
}

if (process.argv.length === 3) {
    const file = fs.readFileSync(process.argv[2], {encoding: 'utf8'});
    console.log(stringify(JSON.parse(file)));
} else {
    const chunks = [];
    process.stdin.on('readable', () => {
        while(true) {
            const chunk = process.stdin.read();
            if (chunk === null) {
                break;
            }
            chunks.push(chunk.toString());
        }
    });
    process.stdin.on('end', () => {
        console.log(stringify(JSON.parse(chunks.join(''))));
    });
}
